#pragma kernel PlaneKernel
#pragma kernel PlaneToWaveKernel
#pragma kernel PlaneToMultiWaveKernel
#pragma kernel PlaneToRippleKernel
#pragma kernel PlaneToSphereKernel
#pragma kernel PlaneToRotatingStarTorusKernel

#pragma kernel WaveToPlaneKernel
#pragma kernel WaveKernel
#pragma kernel WaveToMultiWaveKernel
#pragma kernel WaveToRippleKernel
#pragma kernel WaveToSphereKernel
#pragma kernel WaveToRotatingStarTorusKernel

#pragma kernel MultiWaveToPlaneKernel
#pragma kernel MultiWaveToWaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel MultiWaveToRippleKernel
#pragma kernel MultiWaveToSphereKernel
#pragma kernel MultiWaveToRotatingStarTorusKernel

#pragma kernel RippleToPlaneKernel
#pragma kernel RippleToWaveKernel
#pragma kernel RippleToMultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel RippleToSphereKernel
#pragma kernel RippleToRotatingStarTorusKernel

#pragma kernel SphereToPlaneKernel
#pragma kernel SphereToWaveKernel
#pragma kernel SphereToMultiWaveKernel
#pragma kernel SphereToRippleKernel
#pragma kernel SphereKernel
#pragma kernel SphereToRotatingStarTorusKernel

#pragma kernel RotatingStarTorusToPlaneKernel
#pragma kernel RotatingStarTorusToWaveKernel
#pragma kernel RotatingStarTorusToMultiWaveKernel
#pragma kernel RotatingStarTorusToRippleKernel
#pragma kernel RotatingStarTorusToSphereKernel
#pragma kernel RotatingStarTorusKernel

#define PI 3.14159265358979323846

RWStructuredBuffer<float3> _Positions;

uint _Resolution;
float _Step, _Time, _TransitionProgress;

float2 GetUV (uint3 id)
{
    return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition(uint3 id, float3 position)
{
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

float3 Plane(float u, float v, float t)
{
    float3 position;
    position.x = u;
    position.z = v;
    position.y = 0;
    return position;
}

float3 Wave(float u, float v, float t)
{
    float3 position;
    position.x = u;
    position.z = v;
    position.y = sin(PI * (u + v + t));
    return position;
}


float3 MultiWave(float u, float v, float t)
{
    float3 position;
    position.x = u;
    position.z = v;

    float y = sin(PI * (u + 0.5 * t));
    y += sin(2.0 * PI * (v + t)) * 0.5;
    y += sin(PI * (u + v + 0.25 + t));
    y *= 1.0 / 2.5;
    position.y = y;

    return position;
}

float3 Ripple(float u, float v, float t)
{
    float3 position;
    position.x = u;
    position.z = v;

    float d = sqrt(u * u + v * v);
    float y = sin(PI * (4.0 * d - t));
    y /= 1.0 + 10.0 * d;
    position.y = y;

    return position;
}

float3 Sphere(float u, float v, float t)
{
    float3 p;
    float r = 0.9 + 0.1 * sin(PI * (6.0 * u + 4.0 * v + t));
    float s = r * cos(0.5 * PI * v);
    p.x = s * sin(PI * u);
    p.y = r * sin(PI * 0.5 * v);
    p.z = s * cos(PI * u);

    return p;
}

float3 RotatingStarTorus(float u, float v, float t)
{
    float3 p;
    float r1 = 0.7 + 0.1 * sin(PI * (6.0 * u + 0.5 * t)); // Major radius
    float r2 = 0.15 + 0.05 * sin(PI * (8.0 * u + 4.0 * v + 2.0 * t)); // Minor radius

    float s = r1 + r2 * cos(PI * v);
    p.x = s * sin(PI * u);
    p.y = r2 * sin(PI * v);
    p.z = s * cos(PI * u);

    return p;
}

#define KERNEL_FUNCTION(Function) \
    [numthreads(8, 8, 1)] \
    void Function##Kernel(uint3 id: SV_DispatchThreadID) \
    { \
        float2 uv = GetUV(id); \
        SetPosition(id, Function(uv.x, uv.y, _Time)); \
    }

#define KERNEL_MORPH_FUNCTION(FunctionA, FunctionB) \
    [numthreads(8, 8, 1)] \
    void FunctionA##To##FunctionB##Kernel(uint3 id: SV_DispatchThreadID) \
    { \
        float2 uv = GetUV(id); \
        float3 position = lerp( \
            FunctionA(uv.x, uv.y, _Time), FunctionB(uv.x, uv.y, _Time), \
            _TransitionProgress \
        ); \
        SetPosition(id, position); \
    }

KERNEL_FUNCTION(Plane)
KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(RotatingStarTorus)

KERNEL_MORPH_FUNCTION(Plane, Wave);
KERNEL_MORPH_FUNCTION(Plane, MultiWave);
KERNEL_MORPH_FUNCTION(Plane, Ripple);
KERNEL_MORPH_FUNCTION(Plane, Sphere);
KERNEL_MORPH_FUNCTION(Plane, RotatingStarTorus);

KERNEL_MORPH_FUNCTION(Wave, Plane);
KERNEL_MORPH_FUNCTION(Wave, MultiWave);
KERNEL_MORPH_FUNCTION(Wave, Ripple);
KERNEL_MORPH_FUNCTION(Wave, Sphere);
KERNEL_MORPH_FUNCTION(Wave, RotatingStarTorus);

KERNEL_MORPH_FUNCTION(MultiWave, Plane);
KERNEL_MORPH_FUNCTION(MultiWave, Wave);
KERNEL_MORPH_FUNCTION(MultiWave, Ripple);
KERNEL_MORPH_FUNCTION(MultiWave, Sphere);
KERNEL_MORPH_FUNCTION(MultiWave, RotatingStarTorus);

KERNEL_MORPH_FUNCTION(Ripple, Plane);
KERNEL_MORPH_FUNCTION(Ripple, Wave);
KERNEL_MORPH_FUNCTION(Ripple, MultiWave);
KERNEL_MORPH_FUNCTION(Ripple, Sphere);
KERNEL_MORPH_FUNCTION(Ripple, RotatingStarTorus);

KERNEL_MORPH_FUNCTION(Sphere, Plane);
KERNEL_MORPH_FUNCTION(Sphere, Wave);
KERNEL_MORPH_FUNCTION(Sphere, MultiWave);
KERNEL_MORPH_FUNCTION(Sphere, Ripple);
KERNEL_MORPH_FUNCTION(Sphere, RotatingStarTorus);

KERNEL_MORPH_FUNCTION(RotatingStarTorus, Plane);
KERNEL_MORPH_FUNCTION(RotatingStarTorus, Wave);
KERNEL_MORPH_FUNCTION(RotatingStarTorus, MultiWave);
KERNEL_MORPH_FUNCTION(RotatingStarTorus, Ripple);
KERNEL_MORPH_FUNCTION(RotatingStarTorus, Sphere);

